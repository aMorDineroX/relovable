#!/bin/bash

# üß™ Script de Validation de la Documentation BingX
# Ce script teste tous les endpoints document√©s

echo "üöÄ Validation de la Documentation BingX API"
echo "============================================"
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
BASE_URL="http://localhost:3000"
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Fonction pour tester un endpoint
test_endpoint() {
    local endpoint=$1
    local description=$2
    local expected_field=$3
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -n "üß™ Test $TOTAL_TESTS: $description... "
    
    # Faire la requ√™te
    response=$(curl -s -w "%{http_code}" "$BASE_URL$endpoint")
    http_code="${response: -3}"
    json_response="${response%???}"
    
    # V√©rifier le code HTTP
    if [ "$http_code" = "200" ]; then
        # V√©rifier si la r√©ponse contient le champ attendu
        if echo "$json_response" | jq -e ".$expected_field" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ PASSED${NC}"
            PASSED_TESTS=$((PASSED_TESTS + 1))
            
            # Afficher des d√©tails si c'est une r√©ponse avec des donn√©es
            if [ "$expected_field" = "data" ]; then
                data_count=$(echo "$json_response" | jq -r '.data | if type == "array" then length else "1" end' 2>/dev/null)
                if [ "$data_count" != "null" ] && [ "$data_count" != "" ]; then
                    echo "   üìä Donn√©es: $data_count √©l√©ment(s)"
                fi
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  PARTIAL${NC} (HTTP 200 but missing field '$expected_field')"
            echo "   Response: $(echo "$json_response" | jq -c . 2>/dev/null || echo "$json_response")"
            FAILED_TESTS=$((FAILED_TESTS + 1))
        fi
    else
        echo -e "${RED}‚ùå FAILED${NC} (HTTP $http_code)"
        echo "   Response: $(echo "$json_response" | jq -c . 2>/dev/null || echo "$json_response")"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
    
    echo ""
}

# V√©rifier que le serveur est d√©marr√©
echo "üîç V√©rification du serveur de d√©veloppement..."
if ! curl -s "$BASE_URL/api/server/time" > /dev/null; then
    echo -e "${RED}‚ùå Erreur: Le serveur n'est pas accessible sur $BASE_URL${NC}"
    echo ""
    echo "Solutions:"
    echo "1. D√©marrez le serveur: cd newapp/bingx-web && npm run dev"
    echo "2. V√©rifiez que le port 3000 est libre"
    echo "3. Attendez que le serveur soit compl√®tement d√©marr√©"
    exit 1
fi

echo -e "${GREEN}‚úÖ Serveur accessible${NC}"
echo ""

# Tests des endpoints document√©s
echo -e "${BLUE}üìä Test des Endpoints Perpetual Futures:${NC}"
test_endpoint "/api/balance" "Balance Perpetual Futures" "data"
test_endpoint "/api/positions" "Positions Perpetual Futures" "data"

echo -e "${BLUE}üìÖ Test des Endpoints Standard Futures:${NC}"
test_endpoint "/api/standard-futures/balance" "Balance Standard Futures" "data"
test_endpoint "/api/standard-futures/positions" "Positions Standard Futures" "data"

echo -e "${BLUE}üõ†Ô∏è Test des Endpoints Utilitaires:${NC}"
test_endpoint "/api/server/time" "Heure Serveur" "serverTime"

# Tests additionnels si les endpoints existent
echo -e "${BLUE}üîÑ Test des Endpoints Additionnels:${NC}"
test_endpoint "/api/symbols" "Symboles Disponibles" "symbols"
test_endpoint "/api/market/ticker" "Ticker de March√©" "data"

# Test avec param√®tres
echo -e "${BLUE}üìã Test des Endpoints avec Param√®tres:${NC}"
test_endpoint "/api/positions?symbol=BTC-USDT" "Positions Filtr√©es par Symbole" "data"

# R√©sum√© des tests
echo ""
echo "üìà R√©sum√© des Tests:"
echo "==================="
echo -e "Total: $TOTAL_TESTS tests"
echo -e "${GREEN}R√©ussis: $PASSED_TESTS${NC}"
echo -e "${RED}√âchou√©s: $FAILED_TESTS${NC}"

if [ $FAILED_TESTS -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ Tous les tests ont r√©ussi!${NC}"
    echo "‚úÖ La documentation est coh√©rente avec l'impl√©mentation"
    echo ""
    echo "Prochaines √©tapes recommand√©es:"
    echo "1. Testez avec vos vraies cl√©s API BingX"
    echo "2. V√©rifiez que votre compte a des fonds pour voir des donn√©es"
    echo "3. Explorez les composants React fournis"
    exit 0
else
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Quelques tests ont √©chou√©${NC}"
    echo ""
    echo "Actions recommand√©es:"
    echo "1. V√©rifiez votre fichier .env.local avec vos cl√©s API"
    echo "2. Assurez-vous que vos cl√©s ont les bonnes permissions"
    echo "3. Consultez le guide de d√©pannage: TROUBLESHOOTING_BINGX.md"
    echo ""
    
    if [ $PASSED_TESTS -gt 0 ]; then
        echo -e "${GREEN}‚úÖ $PASSED_TESTS tests ont r√©ussi, l'int√©gration de base fonctionne!${NC}"
        exit 0
    else
        echo -e "${RED}‚ùå Aucun test n'a r√©ussi. V√©rifiez votre configuration.${NC}"
        exit 1
    fi
fi